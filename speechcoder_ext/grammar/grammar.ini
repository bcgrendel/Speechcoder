# Import
import = import <name>[include <name2>]

# Memory reference
memcomplete_class = twoclass <name>
memcomplete_function = twosub <name>
memcomplete_var = twovar <name>

# Declarations
# method ending part:  {endlist}[argument <return_type>]
method = make method <name> [type <type_name>]
function = make function <name> [type <type_name>]
extern_method = ex method <name> [type <type_name>] [class <class_name>]
class = make class <name>
variable = make {symbol | var | variable} <name>[type <type_name>]
parameter = make {param | parameter} <name>{endlist}[type <type_name>]

# Function/method calls
call_function_raw = subcall <name>
call_function = function <name>
call_method_raw = [object <object_name>] sub method <name>
call_method = [object <object_name>] method <name>

# Values
create_object_raw = object <type>
create_object = construct <type>
value = value <name>
array = array
table = table
string_double = {multi} string [<msg>]
string_single = {multi} single [<msg>]

# Common commands/functions/patterns
print = print [<msg>]

# Assignment
assign_var = modify <name>
assign_var_add = mod plus <name>
assign_var_min = mod min <name>
assign_var_mult = mod star <name>
assign_var_div = mod div <name>
assign_var_rem = mod rim <name>

# End of line of code.  Typically semicolon + newline character.
code_line_end = terminate

# And, Or, and Not
not = not
and = and
or = or

# Comparison operators
greater = greater than
greater_equal = big equal
less = less than
less_equal = small equal
equal = equal
not_equal = not equal

# Arithmetic operators
minus = minus
plus = plus
times = times
divide = divide
modulus = modulus

# Binary operators
bin_or = binary or
bin_and = binary and

# Containers
parens = parens
squares = squares
curlies = curlies
angles = angles

# Conditional branches
if = if
else_if = else if
else = else

# Loops
while = while
for = for [<var_name> {limit | each} <value>]

# Special Editing
backspace = erase [<%x>]
comma = comma
colon = colon

# ============
#  Navigation
# ============

# basic
up = up [<%x>]
down = down [<%x>]
left = left [<%x>]
right = right [<%x>]

doc_top = page up
doc_bot = page down
line_start = line start
line_end = line end

# container
# container_nav = box {left | right} {paren | square | bracket | curly | angle} [type {0 | 1 | 2 | 3}]

paren_left = par board [<%rep>] [type {0 | 1 | 2 | 3}]
paren_right = par box [<%rep>] [type {0 | 1 | 2 | 3}]

square_left = square board [<%rep>] [type {0 | 1 | 2 | 3}]
square_right = square box [<%rep>] [type {0 | 1 | 2 | 3}]
brace_left = brace board [<%rep>] [type {0 | 1 | 2 | 3}]
brace_right = brace box [<%rep>] [type {0 | 1 | 2 | 3}]

curl_left = curl board [<%rep>] [type {0 | 1 | 2 | 3}]
curl_right = curl box [<%rep>] [type {0 | 1 | 2 | 3}]
bracket_left = bracket board [<%rep>] [type {0 | 1 | 2 | 3}]
bracket_right = bracket box [<%rep>] [type {0 | 1 | 2 | 3}]

angle_left = angle board [<%rep>] [type {0 | 1 | 2 | 3}]
angle_right = angle box [<%rep>] [type {0 | 1 | 2 | 3}]

# Clipboard management
#----------------------
# Todo
#	- Persistent clipboard via subprocess'd python script that uses sqlite3
#   - Clipboard buffer pages for project contexts.
#   - Automated project backup.
copy = copy
paste = paste
clone = clone
clipboard_list = clipboard list {close} [<%buff>]
clipboard_up = clip up [<%x>]
clipboard_down = clip down [<%x>]
clipboard_buffer_select = clip goto <%buff>

clipboard_page_auto_detect = see page auto {enable | disable}
clipboard_page_manage = see page {add | delete | goto} <name>
clipboard_page_list = see page list {close}
#clipboard_page_create = c page add <name>
#clipboard_page_delete = c page delete <name>
#clipboard_page_select = c page goto <name>

# =================
# End of Navigation
# =================

# Utility functions
# -----------------------------------------------------------
run_program = program {nosave}
save_program = save file


# Show this grammar list on the side in dual pane view in Notepad++
grammar_def = grammar list

# Manage auto language detection.
auto_language_detect = auto language {enable | disable}

# SERVER LANGUAGE
# ---------------

server_script_block = serve block {short} [{php}]

#~~~~~~~~~~~~~~~~~
# HTML SPECIFIC
#~~~~~~~~~~~~~~~~~

# memcomplete_class and var -- class and id attributes from parsed source. see above (top).
inject_doctype = doctype [<%x>]
# table -- see above ("Values" subsection).
inject_tag_raw = subtag {closed} <name>
inject_tag = tag {closed} <name>
# inject attribute -- see parameter ("Declarations" subsection).
parameter_memory = attribute <name>
memcomplete_css_class = see class <name>
memcomplete_html_id = see id <name>

#~~~~~~~~~~~~~~~~~
# CSS SPECIFIC
#~~~~~~~~~~~~~~~~~

inject_property = style <name> [value <val>] [property <spec>]
inject_property_value = property <spec>
head_class = head class <name>
head_tag = head tag <name>
head_id = head id <name>
head_block = style block
pseudo_class = head pseudo <name>
# inject block -- make function

#~~~~~~~~~~~~~~~~~
# JS SPECIFIC
#~~~~~~~~~~~~~~~~~



# Snippet system functions
# -----------------------------------------------------------

add_snippet = addsnippet <name> [context <context_name>]
inject_snippet = snippet <name> [context <context_name>]
display_snippets = displaysnippets [<context_name>]